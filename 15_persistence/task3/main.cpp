/*
 * K-я порядковая статистика на отрезке
 * ограничение по времени на тест 4.0 с
 * ограничение по памяти на тест 512 МБ
 * ввод стандартный ввод
 * вывод стандартный вывод
 *
 * Дан массив из N неотрицательных чисел, строго меньших 10^9.
 * Вам необходимо ответить на несколько запросов о величине k-й порядковой статистики на отрезке [l, r].
 *
 * Входные данные
 * Первая строка содержит число N (1 ≤ N ≤ 450 000) — размер массива.
 * Вторая строка может быть использована для генерации ai — начальных значений элементов массива.
 * Она содержит три числа a1, l и m (0 ≤ a1, l, m < 10^9); для i от 2 до N
 * a[i] = (a[i-1]*l + m) mod 10
 * В частности, 0 ≤ ai < 10^9.
 * Третья строка содержит одно целое число B (1 ≤ B ≤ 1000) — количество групп запросов.
 * Следующие B строк описывают одну группу запросов.
 * Каждая группа запросов описывается 10 числами.
 * Первое число G обозначает количество запросов в группе.
 * Далее следуют числа x1, lx и mx, затем y1, ly и my, затем, k1, lk и mk
 * (1 ≤ x1 ≤ y1 ≤ N, 1 ≤ k1 ≤ y1 - x1 + 1, 0 ≤ lx, mx, ly, my, lk, mk < 10^9).
 * Эти числа используются для генерации вспомогательных последовательностей xg и yg,
 * а также параметров запросов ig, jg и kg (1 ≤ g ≤ G)
 * x[g] = (((i[g-1] - 1) * lx + mx) mod N) + 1, (2 ≤ g ≤ G)
 * y[g] = (((i[g-1] - 1) * ly + my) mod N) + 1, (2 ≤ g ≤ G)
 * i[g] = min(x[g], y[g]), (1 ≤ g ≤ G)
 * j[g] = min(x[g], y[g]), (1 ≤ g ≤ G)
 * k[g] = (((k[g-1] - 1) * lk + mk) mod (j[g] - i[g] + 1)) + 1, (2 ≤ g ≤ G)
 * Сгенерированные последовательности описывают запросы, g-й запрос состоит в поиске k[g]-го по величине числа
 * среди элементов отрезка [i[g], j[g]].
 *
 * Суммарное количество запросов не превосходит 600 000.
 * Выходные данные
 * Выведите единственное число — сумму ответов на запросы.
 *
 * Пример
 * входные данные
 * 5
 * 1 1 1
 * 5
 * 1
 * 1 0 0 3 0 0 2 0 0
 * 1
 * 2 0 0 5 0 0 3 0 0
 * 1
 * 1 0 0 5 0 0 5 0 0
 * 1
 * 3 0 0 3 0 0 1 0 0
 * 1
 * 1 0 0 4 0 0 1 0 0
 * выходные данные
 * 15
 */

/*
 * Подробнее о :
 *
 */

#include <random>
#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <math.h>
#include <array>
#include <utility>
#include <iomanip>
#include <optional>
#include <complex>
#include <string>
#include <numeric>
#include <cctype>
#include <utility>

// Начало тестов

void test_from_task() {
}

void run_all_tests() {
    test_from_task();
}

// Конец тестов

int main(int argc, char *argv[]) {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);

    if (argc > 1) {
        if (std::string(argv[1]) == "test")  // запуск тестов
        {
            run_all_tests();
            return 0;
        }
    }

    // Решение задачи

    return 0;
}
