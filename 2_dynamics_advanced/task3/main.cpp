/*
 * C. Выбор вершин дерева
 * ограничение по времени на тест 2 секунды
 * ограничение по памяти на тест 256 мегабайт
 * ввод стандартный ввод
 * вывод стандартный вывод
 * Дан граф, являющийся деревом. Необходимо найти размер наибольшего по мощности независимого множества.
 * Множество вершин графа называется независимым, если никакие две вершины этого множества не соединены ребром.
 *
 * Входные данные
 * Граф в этой задаче задан в виде корневого дерева. В графе выделена вершина — корень дерева.
 * Для каждой вершины i, не являющейся корнем, задан номер вершины-предка pi в корневом дереве.
 * Дерево, заданное таким образом, состоит из рёбер i—pi для всех вершин i, кроме корня.
 * В первой строке входного файла записано целое число n — количество вершин в графе (1 ≤ n ≤ 100).
 * В следующих n строках задан граф. В i-й из этих строк записано целое число pi — номер вершины-предка i-й вершины.
 * Для корня дерева pi = 0; для всех остальных вершин 1 ≤ pi ≤ n.
 * Гарантируется, что заданный во входном файле граф является деревом.
 * Выходные данные
 * В первой строке выходного файла выведите одно число — размер наибольшего по мощности независимого множества..
 *
 * Примеры
 * Входные данные
 * 5
 * 0
 * 1
 * 1
 * 2
 * 3
 * Выходные данные
 * 3
 *
 * Входные данные
 * 6
 * 5
 * 6
 * 5
 * 1
 * 0
 * 1
 * Выходные данные
 * 3
 */

/*
 * Что храним?
 * База
 * Переход
 * Порядок
 * Ответ
 */

#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>


// Начало тестов

void test_from_task_1() {

}

void run_all_tests() {
    test_from_task_1();
}

// Конец тестов

int main(int argc, char *argv[]) {
    if (argc > 1) {
        if (std::string(argv[1]) == "test")  // запуск тестов
        {
            run_all_tests();
            return 0;
        }
    }

    // Чтение входных данных



    // Запись результата

    return 0;
}