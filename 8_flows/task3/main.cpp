/*
 * C. Улиточки
 * ограничение по времени на тест 2 секунды
 * ограничение по памяти на тест 1024 мегабайта
 * ввод стандартный ввод
 * вывод стандартный вывод
 *
 * Две улиточки Маша и Петя сейчас находятся на лужайке с абрикосами и хотят добраться до своего домика.
 * Лужайки пронумерованы числами от 1 до n и соединены дорожками (может быть несколько дорожек соединяющих две лужайки,
 * могут быть дорожки, соединяющие лужайку с собой же). В виду соображений гигиены, если по дорожке проползла улиточка,
 * то вторая по той же дорожке уже ползти не может.
 * Помогите Пете и Маше добраться до домика.
 *
 * Входные данные
 * В первой строке файла записаны четыре целых числа — n, m, s и t
 * (количество лужаек, количество дорог, номер лужайки с абрикосами и номер домика).
 * В следующих m строках записаны пары чисел. Пара чисел (x, y) означает, что есть дорожка с лужайки x до лужайки y
 * (из-за особенностей улиток и местности дорожки односторонние).
 * Ограничения: 2<=n<=10^5, 0<=m<=10^5, s != t.
 *
 * Выходные данные
 * Если существует решение, то выведите YES и на двух отдельных строчках сначала последовательность лужаек для Машеньки
 * (дам нужно пропускать вперед), затем путь для Пети.
 * Если решения не существует, выведите NO.
 * Если решений несколько, выведите любое.
 *
 * Примеры
 * Входные данные
 * 3 3 1 3
 * 1 2
 * 1 3
 * 2 3
 *
 * Выходные данные
 * YES
 * 1 3
 * 1 2 3
 *
 * Примечание
 * Дан орграф, найти два непересекающихся по ребрам пути из s в t, вывести вершины найденных путей.
 */

#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <array>



// Начало тестов


void test_from_task() {

}

void run_all_tests() {
;
    test_from_task();
}

// Конец тестов

int main(int argc, char *argv[]) {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);

    if (argc > 1) {
        if (std::string(argv[1]) == "test")  // запуск тестов
        {
            run_all_tests();
            return 0;
        }
    }

    // Решение задачи

    return 0;
}