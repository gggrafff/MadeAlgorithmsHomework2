/*
 * D. Великая стена
 * ограничение по времени на тест 2 секунды
 * ограничение по памяти на тест 1024 мегабайта
 * ввод стандартный ввод
 * вывод стандартный вывод
 *
 * У короля Людовика двое сыновей. Они ненавидят друг друга, и король боится,
 * что после его смерти страна будет уничтожена страшными войнами.
 * Поэтому Людовик решил разделить свою страну на две части, в каждой из которых будет властвовать один из его сыновей.
 * Он посадил их на трон в города A и B, и хочет построить минимально возможное количество фрагментов стены
 * таким образом, чтобы не существовало пути из города A в город B.
 *
 * Страну, в которой властвует Людовик, можно упрощенно представить в виде прямоугольника m × n.
 * В некоторых клетках этого прямоугольника расположены горы, по остальным же можно свободно перемещаться.
 * Кроме этого, ландшафт в некоторых клетках удобен для строительства стены, в остальных же строительство невозможно.
 * При поездках по стране можно перемещаться из клетки в соседнюю по стороне, только если ни одна из этих клеток
 * не содержит горы или построенного фрагмента стены.
 *
 * Входные данные
 * В первой строке входного файла содержатся числа m и n (1 ≤ m, n ≤ 50).
 * Следующие m строк по n символов задают карту страны.
 * Символы обозначают:
 *      «#» — гора,
 *      «.» — место, пригодное для постройки стены,
 *      «-» — место, не пригодное для постройки стены,
 *      «A» и «B» — города A и B.
 * Выходные данные
 * В первой строке выходного файла должно быть выведено минимальное количество фрагментов стены F,
 * которые необходимо построить. Далее нужно вывести карту в том же формате, как во входном файле.
 * Клетки со стеной обозначьте символом «+».
 * Если невозможно произвести требуемую застройку, то выведите в выходной файл единственное число  - 1.
 *
 * Примеры
 * Входные данные
 * 5 5
 * --...
 * A-.#-
 * .#.#-
 * --.--
 * --.-B
 * Выходные данные
 * 3
 * --+..
 * A-+#-
 * +#.#-
 * --.--
 * --.-B
 *
 * Входные данные
 * 1 2
 * AB
 * Выходные данные
 * -1
 *
 * Входные данные
 * 2 2
 * A#
 * #B
 * Выходные данные
 * 0
 * A#
 * #B
 */

#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <array>



// Начало тестов


void test_from_task() {

}

void run_all_tests() {
;
    test_from_task();
}

// Конец тестов

int main(int argc, char *argv[]) {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);

    if (argc > 1) {
        if (std::string(argv[1]) == "test")  // запуск тестов
        {
            run_all_tests();
            return 0;
        }
    }

    // Решение задачи

    return 0;
}