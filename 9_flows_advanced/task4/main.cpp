/*
 * D. Автоматное программирование
 * ограничение по времени на тест 5 секунд
 * ограничение по памяти на тест 256 мегабайт
 * ввод стандартный ввод
 * вывод стандартный вывод
 *
 * В один замечательный день в компанию «X» завезли k автоматов. И не простых автоматов, а автоматов-программистов!
 * Это был последний неудачный шаг перед переходом на андроидов-программистов, но это уже совсем другая история.
 *
 * В компании сейчас n задач, для каждой из которых известно
 * время начала ее выполнения si, длительность ее выполнения ti и прибыль компании от ее завершения ci.
 * Любой автомат может выполнять любую задачу, ровно одну в один момент времени.
 * Если автомат начал выполнять задачу, то он занят все моменты времени с si по si+ti−1 включительно и
 * не может переключиться на другую задачу.
 *
 * Вам требуется выбрать набор задач, которые можно выполнить с помощью этих k автоматов и
 * который принесет максимальную суммарную прибыль.
 *
 * Входные данные
 * В первой строке записаны два целых числа n и k (1≤n≤1000, 1≤k≤50) — количество задач и количество автоматов, соответственно.
 * В следующих n строках через пробелы записаны тройки целых чисел si,ti,ci (1≤si,ti≤109, 1≤ci≤106),
 * si — время начала выполнения i-го задания, ti — длительность i-го задания, а ci — прибыль от его выполнения.
 *
 * Выходные данные
 * Выведите n целых чисел x1,x2,…,xn. Число xi должно быть равно 1, если задачу i следует выполнить, и 0 в противном случае.
 * Если оптимальных решений несколько, то выведите любое из них.
 *
 * Примеры
 * Входные данные
 * 3 1
 * 2 7 5
 * 1 3 3
 * 4 1 3
 * Выходные данные
 * 0 1 1
 *
 * Входные данные
 * 5 2
 * 1 5 4
 * 1 4 5
 * 1 3 2
 * 4 1 2
 * 5 6 1
 * Выходные данные
 * 1 1 0 0 1
 */


#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <array>



// Начало тестов


void test_from_task() {

}

void run_all_tests() {
    test_from_task();
}

// Конец тестов

int main(int argc, char *argv[]) {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);

    if (argc > 1) {
        if (std::string(argv[1]) == "test")  // запуск тестов
        {
            run_all_tests();
            return 0;
        }
    }

    // Решение задачи

    return 0;
}