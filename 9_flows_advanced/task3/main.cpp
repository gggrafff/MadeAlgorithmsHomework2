/*
 * C. План эвакуации
 * ограничение по времени на тест 2 секунды
 * ограничение по памяти на тест 256 мегабайт
 * ввод стандартный ввод
 * вывод стандартный вывод
 *
 * В городе есть муниципальные здания и бомбоубежища, которые были специально построены для эвакуации служащих
 * в случае ядерной войны. Каждое бомбоубежище имеет ограниченную вместительность по количеству людей,
 * которые могут в нем находиться. В идеале все работники из одного муниципального здания должны были бы бежать
 * к ближайшему бомбоубежищу. Однако, в таком случае, некоторые бомбоубежища могли бы переполниться,
 * в то время как остальные остались бы наполовину пустыми.
 *
 * Чтобы разрешить эту проблему Городской Совет разработал специальный план эвакуации. Вместо того,
 * чтобы каждому служащему индивидуально приписать, в какое бомбоубежище он должен бежать, для каждого
 * муниципального здания определили, сколько служащих из него в какое бомбоубежище должны бежать.
 * Задача индивидуального распределения была переложена на внутреннее управление муниципальных зданий.
 *
 * План эвакуации учитывает количество служащих в каждом здании — каждый служащий должен быть учтен в плане и
 * в каждое бомбоубежище может быть направлено количество служащих, не превосходящее вместимости бомбоубежища.
 *
 * Городской Совет заявляет, что их план эвакуации оптимален в том смысле,
 * что суммарное время эвакуации всех служащих города минимально.
 *
 * Мэр города, находящийся в постоянной конфронтации с Городским Советом, не слишком то верит этому заявлению.
 * Поэтому он нанял Вас в качестве независимого эксперта для проверки плана эвакуации. Ваша задача состоит в том,
 * чтобы либо убедиться в оптимальности плана Городского Совета, либо доказать обратное,
 * представив в качестве доказательства другой план эвакуации с меньшим суммарным временем для эвакуации всех служащих.
 *
 * Карта города может быть представлена в виде квадратной сетки. Расположение муниципальных зданий и бомбоубежищ
 * задается парой целых чисел, а время эвакуации из муниципального здания с координатами (Xi, Yi) в бомбоубежище
 * с координатами (Pj, Qj) составляет Dij = |Xi - Pj| + |Yi - Qj| + 1 минут.
 *
 * Входные данные
 * Входной файл содержит описание карты города и плана эвакуации, предложенного Городским Советом.
 * Первая строка входного файла содержит два целых числа N (1 ≤ N ≤ 100) и M (1 ≤ M ≤ 100), разделенных пробелом.
 * N — число муниципальных зданий в городе (все они занумерованы числами от 1 до N),
 * M — число бомбоубежищ (все они занумерованы числами от 1 до M).
 * Последующие N строк содержат описания муниципальных зданий.
 * Каждая строка содержит целые числа Xi, Yi и Bi, разделенные пробелами,
 *      где Xi, Yi (-1000 ≤ Xi, Yi ≤ 1000) — координаты здания, а Bi (1 ≤ Bi ≤ 1000) — число служащих в здании.
 * Описание бомбоубежищ содержится в последующих M строках.
 * Каждая строка содержит целые числа Pj, Qj и Cj, разделенные пробелами,
 *      где Pj, Qj (-1000 ≤ Pj, Qj ≤ 1000) — координаты бомбоубежища, а Cj (1 ≤ Cj ≤ 1000) — вместимость бомбоубежища.
 * В последующих N строках содержится описание плана эвакуации.
 * Каждая строка представляет собой описание плана эвакуации для отдельного здания.
 * План эвакуации из i-го здания состоит из M целых чисел Eij, разделенных пробелами.
 * Eij (0 ≤ Eij ≤ 10000) — количество служащих, которые должны эвакуироваться из i-го здания в j-е бомбоубежище.
 * Гарантируется, что план, заданный во входном файле, корректен.
 *
 * Выходные данные
 * Если план эвакуации Городского Совета оптимален, то выведите одно слово OPTIMAL.
 * В противном случае выведите на первой строке слово SUBOPTIMAL, а в последующих N строках выведите
 * Ваш план эвакуации (более оптимальный) в том же формате, что и во входном файле.
 * Ваш план не обязан быть оптимальным, но должен быть лучше плана Городского Совета.
 *
 * Примеры
 * Входные данные
 * 3 4
 * -3 3 5
 * -2 -2 6
 * 2 2 5
 * -1 1 3
 * 1 1 4
 * -2 -2 7
 * 0 -1 3
 * 3 1 1 0
 * 0 0 6 0
 * 0 3 0 2
 * Выходные данные
 * SUBOPTIMAL
 * 3 0 1 1
 * 0 0 6 0
 * 0 4 0 1
 *
 * Входные данные
 * 3 4
 * -3 3 5
 * -2 -2 6
 * 2 2 5
 * -1 1 3
 * 1 1 4
 * -2 -2 7
 * 0 -1 3
 * 3 0 1 1
 * 0 0 6 0
 * 0 4 0 1
 * Выходные данные
 * OPTIMAL
 */


#include <iostream>
#include <vector>
#include <algorithm>
#include <cassert>
#include <cmath>
#include <array>



// Начало тестов


void test_from_task() {

}

void run_all_tests() {
    test_from_task();
}

// Конец тестов

int main(int argc, char *argv[]) {
    std::ios::sync_with_stdio(false);
    std::cin.tie(nullptr);
    std::cout.tie(nullptr);

    if (argc > 1) {
        if (std::string(argv[1]) == "test")  // запуск тестов
        {
            run_all_tests();
            return 0;
        }
    }

    // Решение задачи

    return 0;
}