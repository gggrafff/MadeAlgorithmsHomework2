/*
 * D. Расстояние по Левенштейну
 *
 * ограничение по времени на тест 2 секунды
 * ограничение по памяти на тест 256 мегабайт
 * ввод стандартный ввод
 * вывод стандартный вывод
 *
 * Дана текстовая строка. С ней можно выполнять следующие операции:
 * 1. Заменить один символ строки на другой символ.
 * 2. Удалить один произвольный символ.
 * 3. Вставить произвольный символ в произвольное место строки.
 * Например, при помощи первой операции из строки «СОК» можно получить строку «СУК»,
 * при помощи второй операции — строку «ОК», при помощи третьей операции — строку «СТОК».
 * Минимальное количество таких операций, при помощи которых можно из одной строки получить другую,
 * называется стоимостью редактирования или расстоянием Левенштейна.
 * Определите расстояние Левенштейна для двух данных строк.
 *
 * Входные данные
 * Программа получает на вход две строки, длина каждой из которых не превосходит 1000 символов, строки состоят только из заглавных латинских букв.
 * Выходные данные
 * Требуется вывести одно число — расстояние Левенштейна для данных строк.
 *
 * Пример
 * Входные данные
 * ABCDEFGH
 * ACDEXGIH
 * Выходные данные
 * 3
 */

 /*
  * Что храним?
  * База
  * Переход
  * Порядок
  * Ответ
  */

#include <iostream>
#include <vector>
#include <algorithm>

uint64_t calculate_levenshtein_distance(const std::string& str1, const std::string& str2) {
    return 0;
}

int main(int argc, char *argv[]) {
    // Чтение входных данных
    std::string str1, str2;
    std::cin >> str1 >> str2;

    auto distance = calculate_levenshtein_distance(str1, str2);

    // Запись результата
    std::cout << distance;

    return 0;
}